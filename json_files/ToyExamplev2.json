{
  "name": "ToyExample",
  "version": "2.0.0",
  "records": [
    "(record:SensorEventRecord {timestamp, sensorId}",
    "(record:PizzaRecord {pizzaId})",
    "(record:PackRecord {packId})",
    "(record:BoxRecord {boxId})",
    "(record:PalletRecord {palletId})",
    "(record:SensorRecord {sensorId})",
    "(record:SensorTypeRecord {sensorId, sensorType})",
    "(record:StationRecord {stationName, stationType})",
    "(record:ProductionPlanRecord {code, OPTIONAL diameter, OPTIONAL height, OPTIONAL weight, OPTIONAL packCount, OPTIONAL boxCount, OPTIONAL boxQuantity, OPTIONAL interval, OPTIONAL intervalDelta})",
  ],
  "nodes": [
    {
      "type": "Event",
      "constructor": [
        {
          "prevalent_record": "(record:SensorEventRecord)",
          "result": "(e:Event {timestamp:record.timestamp, activity: \"Pass Sensor \" + record.sensorId})"
        }
      ]
    },
    {
      "type": "Activity",
      "constructor": [
        {
          "prevalent_record": "(record:SensorEventRecord)",
          "result": "(a:Activity {activity: \"Pass Sensor \" + record.sensorId})",
          "infer_observed": true
        }
      ]
    },
    {
      "type": "Pizza",
      "constructor": [
        {
          "prevalent_record": "(record:PizzaRecord)",
          "result": "(v:Entity:Pizza {sysId: record.pizzaId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Pack",
      "constructor": [
        {
          "prevalent_record": "(record:PackRecord)",
          "result": "(v:Entity:Pack {sysId: record.packId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Box",
      "constructor": [
        {
          "prevalent_record": "(record:BoxRecord)",
          "result": "(v:Entity:Box {sysId: record.boxId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Pallet",
      "constructor": [
        {
          "prevalent_record": "(record:PalletRecord)",
          "result": "(v:Entity:Pallet {sysId: record.palletId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Sensor",
      "constructor": [
        {
          "prevalent_record": "(record:SensorTypeRecord)",
          "result": "(v:Entity:Resource:MachinePart:Sensor {sysId: record.sensorId, type: record.sensorType})",
          "infer_corr_from_event_record": true,
          "corr_type": "EXECUTED_BY"
        },
        {
          "prevalent_record": "(record:SensorRecord)",
          "result": "(v:Entity:Resource:MachinePart:Sensor {sysId: record.sensorId})",
          "infer_corr_from_event_record": true,
          "corr_type": "EXECUTED_BY"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Station",
      "constructor": [
        {
          "prevalent_record": "(record:StationRecord)",
          "result": "(v:Entity:Resource:Station:Location {sysId: record.stationName, type: record.stationType})",
          "infer_corr_from_event_record": true
        }
      ]
    },
    {
      "type": "ProductionPlan",
      "constructor": [
        {
          "prevalent_record": "(record:ProductionPlanRecord)",
          "result": "(v:ProductionPlan {code: record.code, OPTIONAL diameter: record.diameter, OPTIONAL height: record.height, OPTIONAL weight: record.weight, OPTIONAL packCount: record.packCount, OPTIONAL boxCount: record.boxCount, OPTIONAL boxQuantity: record.boxQuantity, OPTIONAL interval: record.interval, OPTIONAL intervalDelta: record.intervalDelta})",
          "infer_corr_from_event_record": false
        }
      ]
    }
  ],
  "relations": [

    {
      "type": "HAS_TYPE",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:PizzaRecord)",
        "from_node": "(pizza: Pizza)",
        "to_node": "(description: PizzaDescription)",
        "result": "(pizza) - [:HAS_TYPE] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "HAS_TYPE",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:PackRecord)",
        "from_node": "(pack: Pack)",
        "to_node": "(description: PizzaDescription)",
        "result": "(pack) - [:HAS_TYPE] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "HAS_TYPE",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:BoxRecord)",
        "from_node": "(box: Box)",
        "to_node": "(description: PizzaDescription)",
        "result": "(box) - [:HAS_TYPE] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "PART_OF",
      "constructor": {
        "prevalent_record": "(record:SensorTypeRecord:StationRecord)",
        "from_node": "(sensor: Sensor)",
        "to_node": "(station: Station)",
        "result": "(sensor) - [:PART_OF] -> (station)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "PART_OF",
      "constructor": {
        "relations": [
          "(pizza:Pizza) <- [:ACTS_ON] - (e:Event)",
          "(pack:Pack) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(pizza: Pizza)",
        "to_node": "(pack: Pack)",
        "result": "(pizza) - [:PART_OF] -> (pack)",
        "model_as_node": false
      }
    },
    {
      "type": "PART_OF",
      "constructor": {
        "relations": [
          "(pack:Pack) <- [:ACTS_ON] - (e:Event)",
          "(box:Box) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(pack: Pack)",
        "to_node": "(box: Box)",
        "result": "(pack) - [:PART_OF] -> (box)",
        "model_as_node": false
      }
    },
    {
      "type": "PART_OF",
      "constructor": {
        "relations": [
          "(box:Box) <- [:ACTS_ON] - (e:Event)",
          "(pallet:Pallet) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(box: Box)",
        "to_node": "(pallet: Pallet)",
        "result": "(box) - [:PART_OF] -> (pallet)",
        "model_as_node": false
      }
    }
  ]
}
