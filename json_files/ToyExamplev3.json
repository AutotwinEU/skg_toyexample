{
  "name": "ToyExample",
  "version": "3.0.0",
  "records": [
    "(record:EventRecord:SensorEventRecord:V3 {timestamp, sensorId}",
    "(record:PizzaRecord:V3 {pizzaId})",
    "(record:PackRecord:V3 {packId})",
    "(record:BoxRecord:V3 {boxId})",
    "(record:PalletRecord:V3 {palletId})",
    "(record:SensorRecord:V3 {sensorId, OPTIONAL sensorType})",
    "(record:StationRecord:V3 {stationName, stationType})",
    "(record:ProductionPlanRecord:V3 {code, OPTIONAL diameter, OPTIONAL height, OPTIONAL weight, OPTIONAL packCount, OPTIONAL boxCount, OPTIONAL boxQuantity, OPTIONAL interval, OPTIONAL intervalDelta})",
    "(record:PizzaQualityAttributeRecord:V3 {exceededCookingTime})"
    "(record:OperatorRecord:V3 {operatorId})"
  ],
  "nodes": [
    {
      "type": "Event",
      "constructor": [
        {
          "prevalent_record": "(record:SensorEventRecord:V3)",
          "result": "(e:Event:V3 {timestamp:record.timestamp, activity: \"Pass Sensor \" + record.sensorId})"
        }
      ]
    },
    {
      "type": "Activity",
      "constructor": [
        {
          "prevalent_record": "(record:SensorEventRecord:V3)",
          "result": "(a:Activity:V3 {activity: \"Pass Sensor \" + record.sensorId})",
          "infer_observed": true
        }
      ]
    },
    {
      "type": "Pizza",
      "constructor": [
        {
          "prevalent_record": "(record:PizzaRecord:V3)",
          "result": "(v:Entity:Pizza:V3 {sysId: record.pizzaId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },

    {
      "type": "pizzaQualityAttribute",
      "constructor": [
        {
          "prevalent_record": "(record:PizzaQualityAttributeRecord:V3)",
          "result": "(v:EntityAttribute:PizzaQualityAttribute:V3 {burned: record.exceededCookingTime})",
          "infer_corr_from_event_record": false
        }
      ]
    },
    {
      "type": "Pack",
      "constructor": [
        {
          "prevalent_record": "(record:PackRecord:V3)",
          "result": "(v:Entity:Pack:V3 {sysId: record.packId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Box",
      "constructor": [
        {
          "prevalent_record": "(record:BoxRecord:V3)",
          "result": "(v:Entity:Box:V3 {sysId: record.boxId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Pallet",
      "constructor": [
        {
          "prevalent_record": "(record:PalletRecord:V3)",
          "result": "(v:Entity:Pallet:V3 {sysId: record.palletId})",
          "infer_corr_from_event_record": true,
          "corr_type": "ACTS_ON"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Sensor",
      "constructor": [
        {
          "prevalent_record": "(record:SensorRecord:V3)",
          "result": "(v:Entity:Resource:MachinePart:Sensor:V3 {sysId: record.sensorId, OPTIONAL sensorType:record.sensorType})",
          "infer_corr_from_event_record": true,
          "corr_type": "EXECUTED_BY"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Station",
      "constructor": [
        {
          "prevalent_record": "(record:StationRecord:V3)",
          "result": "(v:Entity:Resource:Station:Location:V3 {sysId: record.stationName, type: record.stationType})",
          "infer_corr_from_event_record": true
        }
      ]
    },
    {
      "type": "ProductionPlan",
      "constructor": [
        {
          "prevalent_record": "(record:ProductionPlanRecord:V3)",
          "result": "(v:ProductionPlan:V3 {code: record.code, OPTIONAL diameter: record.diameter, OPTIONAL height: record.height, OPTIONAL weight: record.weight, OPTIONAL packCount: record.packCount, OPTIONAL boxCount: record.boxCount, OPTIONAL boxQuantity: record.boxQuantity, OPTIONAL interval: record.interval, OPTIONAL intervalDelta: record.intervalDelta})",
          "infer_corr_from_event_record": false
        }
      ]
    }
  ],
  "relations": [ {
      "type": "HAS_PROPERTY",
      "constructor": {
        "prevalent_record": "(record:PizzaQualityAttributeRecord:PizzaRecord:V3)",
        "from_node": "(pizza: Pizza:V3)",
        "to_node": "(quality: PizzaQualityAttribute:V3)",
        "result": "(pizza) - [:HAS_PROPERTY] -> (quality)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "FOLLOWS_PIZZA",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:PizzaRecord:V3)",
        "from_node": "(pizza: Pizza:V3)",
        "to_node": "(description: PizzaDescription:V3)",
        "result": "(pizza) - [:FOLLOWS] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "FOLLOWS_PACK",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:PackRecord:V3)",
        "from_node": "(pack: Pack:V3)",
        "to_node": "(description: PizzaDescription:V3)",
        "result": "(pack) - [:HAS_TYPE] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "FOLLOWS_BOX",
      "constructor": {
        "prevalent_record": "(record:PizzaCodeRecord:BoxRecord)",
        "from_node": "(box: Box:V3)",
        "to_node": "(description: PizzaDescription:V3)",
        "result": "(box) - [:HAS_TYPE] -> (description)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "PART_OF_SENSOR_STATION",
      "constructor": {
        "prevalent_record": "(record:SensorRecord:StationRecord)",
        "from_node": "(sensor: Sensor:V3)",
        "to_node": "(station: Station:V3)",
        "result": "(sensor) - [:PART_OF] -> (station)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "OCCURRED_AT",
      "constructor": {
        "relations": [
          "(e:Event:V3) - [:EXECUTED_BY] -> (sensor:Sensor)",
          "(sensor) - [:PART_OF] -> (station:Station)"
        ],
        "from_node": "(e:Event:V3)",
        "to_node": "(station:Station:V3)",
        "result": "(e) - [:OCCURRED_AT] -> (station)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "OCCURS_AT",
      "constructor": {
        "relations": [
          "(e:Event:V3) <- [:OBSERVED] - (a:Activity)",
          "(e) - [:OCCURRED_AT] -> (station:Station)"
        ],
        "from_node": "(a:Activity:V3)",
        "to_node": "(station:Station:V3)",
        "result": "(a) - [:OCCURS_AT] -> (station)",
        "model_as_node": false,
        "infer_corr_from_reified_parents": false
      }
    },
    {
      "type": "PART_OF_PIZZA_PACK",
      "constructor": {
        "relations": [
          "(pizza:Pizza:V3) <- [:ACTS_ON] - (e:Event:V3)",
          "(pack:Pack:V3) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(pizza: Pizza:V3)",
        "to_node": "(pack: Pack:V3)",
        "result": "(pizza) - [:PART_OF] -> (pack)",
        "model_as_node": false
      }
    },
    {
      "type": "PART_OF_PACK_BOX",
      "constructor": {
        "relations": [
          "(pack:Pack:V3) <- [:ACTS_ON] - (e:Event:V3)",
          "(box:Box:V3) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(pack: Pack:V3)",
        "to_node": "(box: Box:V3)",
        "result": "(pack) - [:PART_OF] -> (box)",
        "model_as_node": false
      }
    },
    {
      "type": "PART_OF_BOX_PALLET",
      "constructor": {
        "relations": [
          "(box:Box:V3) <- [:ACTS_ON] - (e:Event:V3)",
          "(pallet:Pallet:V3) <- [:ACTS_ON] - (e)"
        ],
        "from_node": "(box: Box:V3)",
        "to_node": "(pallet: Pallet:V3)",
        "result": "(box) - [:PART_OF] -> (pallet)",
        "model_as_node": false
      }
    }
  ]
}
